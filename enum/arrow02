
using System;
using System.Collections;
using System.Reflection.Metadata.Ecma335;
using System.Text;

public class ArrowStore

{
    static void Main(string[] args)
    {
        MyArrow home = new MyArrow(ArrowHead.Curved, FletchingTypes.Plastic, 3); //call my new class

        Console.WriteLine("Welcome to the ArrowStore, please choose your ideal arrow:");  
        //ask the user the head, fletch, and length
        
        //call the method to get the arrow 
        while (true) {
            Console.WriteLine(home.GetArrow());
            Console.WriteLine($"That arrow costs {home.GetCost()} gold.");
            Console.Write("Awesome! would you like to choose another arrow ? (y/n): ");
            var user1 = Console.ReadLine();
            if (user1 == "n"){
                Console.WriteLine("Thanks, come back any time.");
                break;
            }
       
         }   
    }
}

 class MyArrow
   {
    //create the arrow how it is composed. Use from the types on enum.
    // declare private data 
    private ArrowHead _arrowhead;
    private FletchingTypes _fletch;
    private float _lenght;
   
    
    public ArrowHead GetArrowHead() => _arrowhead;
    public FletchingTypes GetFletchignTypes() => _fletch;
    public float GetlengthAll() => _lenght;

//come to life my arrow thorugh constructor
    public MyArrow(ArrowHead arrow, FletchingTypes fletch, float leng ){
         _arrowhead = arrow;
         _fletch = fletch;
         _lenght = leng;
    }

  

    public MyArrow GetArrow(){
        ArrowHead arrow = GetUserArrow();
        FletchingTypes fletch = GetUserFletch();
        float length = GetLength();
        return new MyArrow(arrow, fletch, length);
    }

     //get the arrowtypes from enum1
     ArrowHead GetUserArrow(){
        Console.Write("Choose the Arrow type (Broadhead, Curved, Agate): ");
        var input = Console.ReadLine();
        //switch the input expression converting to values of the enum of arrowhead
        return input switch
        {
            "Broadhead"=> ArrowHead.Broadhead,
              "Curved"=> ArrowHead.Curved,
            "Agate"=> ArrowHead.Agate,
             _=> ArrowHead.Broadhead
            };
        }
    //Get the fletch from enum2
    FletchingTypes GetUserFletch(){
        Console.Write("Choose the fletch type (Plastic, Feather, Aerovane): ");
        var input = Console.ReadLine();
        return input switch {
         "Plastic" => FletchingTypes.Plastic,
         "Feather" => FletchingTypes.Feather,
         "Aerovane" => FletchingTypes.Aerovane,
         _=> FletchingTypes.Plastic

         };
    }
      //Get the length,
     float GetLength(){

        float start = 0;
        while (start < 60 || start > 100)
        {
          Console.Write("Arrow length: ");
         //convert from string to float number
         start = Convert.ToSingle(Console.ReadLine());
        }
        return start;
     }
    public float GetCost(){
        float headcost = _arrowhead switch
        {
            ArrowHead.Agate => 20,
            ArrowHead.Broadhead => 30,
            ArrowHead.Curved => 15,
            _ => 0
        };
        float fletchcost = _fletch switch{
            
            FletchingTypes.Plastic =>10, 
            FletchingTypes.Feather => 5,
            FletchingTypes.Aerovane => 15,
            _ => 0
        };
        float allcost = 0.05f * _lenght;
     //Add the values
        return headcost + fletchcost + allcost;
    }

}
enum ArrowHead
{
    Broadhead,
    Curved,
    Agate

}
enum FletchingTypes
{
    Plastic,
    Feather,
    Aerovane
}
